@startuml diagram



class WheyProtein{
    - nome: String
    - descricao: String
    - preco: Double
    - peso: Integer
}


class Lote{
    - codigo: String 
    - quantidade: Integer
    - dataFabricacao: LocalDate
}

class Fabricante{
    -cnpj: String
    -nome: String
    -email: String
}

class Sabor{
    - id: Long 
    - nome: String
}

enum TipoWhey{
    + CONCETRADO: int
    + ISOLADO: int
    + HIDROLISADO: int
}

class TabelaNutricional{
    - quantidadePorcao: Integer
    - unidadePorcao: String
    - pesoPorcaoGramas: Double
    - calorias: Double
    - gorduras: Double
    - gordurasSaturadas: Double
    - colesterol: Double
    - sodio: Double
    - fibras: Double
    - acucares: Double

}

class Cliente{

}

class Usuario{
    - nome: String
    - cpf: String
    - email: String
    - senha: String
    - dataNascimento: LocalDate
}

class Funcionario{
    - salario: Double
}



class Telefone{
    - codigoArea: String
    - numero: String
}

class Pedido{
    - data: LocalDateTime
    - valorTotal: Double
}

Pedido "1" *--> "*" StatusPedido
StatusPedido "*" --> "1" Situacao

class StatusPedido{
    - dataAtualizacao: LocalDateTime
}

enum Situacao{
    +ENVIADO: int
    +ENTREGUE: int
    +DEVOLVIDO: int
}

class ItemPedido{
    - quantidade:Integer
    - preco: Double
}

class Avaliacao{
    - comentario: String
    - data: LocalDate
}

enum Nota{
    + ESTRELA_1
    + ESTRELA_2
    + ESTRELA_3
    + ESTRELA_4
    + ESTRELA_5
}

class Endereco{
    -logradouro: String
    -bairro: String
    -numero:String
    -complemento: String
    -cep: String
}

class EnderecoEntrega{
    -logradouro: String
    -bairro: String
    -numero:String
    -complemento: String
    -cep: String
}

class Cidade{
    -nome:String
}

class Estado{
    -nome:String
}

abstract Pagamento{
    - valor: Double
    - dataPagamento: LocalDateTime
     -dataVencimento: LocalDateTime
}

enum Status{
    + PENDENTE: int
    + PAGO: int
    + VENCIDO: int
}

class PIX{
   -chave: String
}

class Boleto{
    -codigoBarras:String
}

class Cartao{
    - nomeTitular: String
    - numero: String
    - codigoSecuranca: String
    - validade: LocalDate
}

enum TipoCartao{
    + DEBITO: int
    + CREDITO: int
}

class Cupom{
    -codigo: String
    -percentualDesconto: Double
    -dataValidade: LocalDateTime
    -ativo: Boolean
}

Pedido *--> Pagamento
Pagamento "*" -down-> "1" Status
Cartao "*" --> "1" TipoCartao
PIX --|> Pagamento
Boleto --|> Pagamento
Cartao --|> Pagamento

Pedido "1" *--> "*"ItemPedido
ItemPedido "*" --> "1" Lote
ItemPedido "*" o--> "1" Cupom
' Não faz sentido Cliente ter Pedido , se não teria que inserir pedido em cliente
Pedido  "*" --> "1" Cliente  
Pedido "1" *--> "1" EnderecoEntrega

Cidade "*" *--> "1" Estado
Endereco "*" --> "1" Cidade
EnderecoEntrega "*" --> "1" Cidade

' Se a modelagem fosse de 1 para 1 , eu teria produtos únicos
WheyProtein "*" --> "1" Sabor 
WheyProtein "*" --> "1" TipoWhey
WheyProtein "1" *--> "1" TabelaNutricional


WheyProtein "*"--> "1" Fabricante
Lote "*" --> "1" WheyProtein


Cliente "*" --> "*" WheyProtein : listaDesejos
Usuario "1" *-up-> "*" Endereco
Usuario "1" *-up-> "*" Telefone

Cliente "1"-right-> "1" Usuario
Funcionario "1" --> "1" Usuario
Fabricante "1" *-left-> "*" Telefone
Fabricante "1" *--> "*" Endereco

Cupom "*" o--> "1" Fabricante


Avaliacao "*" --> "1" Cliente
Avaliacao "*" --> "1" WheyProtein
Avaliacao "*" --> "1" Nota

' Anotações
note left of WheyProtein: Peso em gramas

